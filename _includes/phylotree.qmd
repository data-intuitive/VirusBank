```{ojs}
//| output: none
//| echo: false
html`<link rel=stylesheet href='${resolve("phylotree@1.1.0/dist/phylotree.css")}'>`
html`
<style type="text/css">

  @import url('https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900,900italic');
  @import url('https://fonts.googleapis.com/css2?family=Chakra+Petch:ital,wght@0,300;0,500;0,600;0,700;1,300;1,400&display=swap');

  .phylotree-node-text {
    fill: grey;
    font-family: "Chakra Petch";
    font-weight: 300;
    font-size: 24px!important;
  }

  .phylotree-node-text-selected {
    fill: black;
    font-family: "Chakra Petch";
    font-weight: 300;
    font-size: 28px!important;
  }

  .phylotree-node-text-hl {
    fill: white;
    font-family: "Chakra Petch";
    font-weight: "bold";
    font-size: 28px!important;
  }

  .phylotree-node-text-info {
    fill: black;
    font-family: "Chakra Petch";
    font-weight: 700;
    font-size: 28px!important;
  }

</style>
`

height = 700
width = 600

d3 = {
  const d3 = window.d3 = await require("d3@7");
  await require("d3-context-menu@2.1.0/js/d3-context-menu.js").catch(() => {});
  return d3;
}

phylotree = await require("phylotree@1.1/dist/phylotree.js");

FA = FileAttachment
nwk = await FA("tree.newick").text();
annotations = await FA("annotations.json").json();
annotationsMap = Object.assign({}, ...(annotations.map(item => ({ [item.id]: { id: item.id, description: item.description, name: item.name } }) )))
toolbox = await FA("toolbox.json").json();

clearPopup = () => {
  const ct = d3.select('#annotation-container')
  ct.selectAll("*").remove()
}

initPopup = () => {
  const ct = d3.select('#annotation-container')
  ct.selectAll("*").remove()
  const ctBody = ct.append("div").attr("class", "card-body")
  ctBody.append('h5').attr('class', "card-title").text("Please hover over a virus to get more information");
}

availableTools = (virus_id) => 
  toolbox.filter(t => t.available.includes(virus_id)).map(t => t.name)


optimizedTools = (virus_id) => {
  toolbox.filter(t => t.optimized.includes(virus_id)).map(t => t.name)
}

fillPopup = (d) => {
  const ct = d3.select('#annotation-container');
  const ctBody = ct.append("div").attr("class", "card-body");
  ctBody.append('h5').attr('class', "card-title").append('a').attr('href', 'http://localhost:4397/#clinical-relevance').text(d.data.name);
  ctBody.append('p').attr("class", "card-text").text(annotationsMap[d.data.name].name);
  ctBody.append('p').attr("class", "card-text").text(availableTools(d.data.name).join(", "));
}

init = initPopup()

s1 = d3.select("body").on('click', initPopup )

tree = new phylotree.phylotree(nwk)   // class Phylotree
                                      // https://github.com/veg/phylotree.js/blob/master/src/main.js#L90

renderedTree = tree                   // class TreeRender
  .render({
    'left-right-spacing': 'fit-to-size',
    'top-bottom-spacing': 'fit-to-size',
    'is-radial': true,
    'selectable': false,  // make nodes and branches not selectable
    'collapsible': true,
    'transitions' : true,
    'show-menu': true,
    'show-scale': false,
    'align-tips': true,
    'width': width,
    'height': height,
    'zoom': false,
    'minimal-per-node-spacing': 2,
    'minimum-per-level-spacing': 2,
    'container': "#tree-container"
  })
  .style_nodes( (element, data) => {
    const inToolbox = (availableTools(data.data.name).length > 0)
    const updtElement = inToolbox ? element.select("text").attr("class", "phylotree-node-text-hl") : element
    element.on('mouseover', function() {
      clearPopup();
      fillPopup(data);
    });
  })
  .layout(true)

tmp = d3.select("#tree-container").node().appendChild(renderedTree.svg.node())

```

