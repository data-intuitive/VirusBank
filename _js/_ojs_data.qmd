```{ojs}
//| echo: false

// The families to load
families = [ "alphaviruses", "flaviviridae" ]

// Utility functions
import { encodeTool } from '/_js/functions.js'
import { availableToolObjsF } from '/_js/functions.js'


function toolsForVirus(_family, _virus) {
  const availableTools = availableToolObjsF(annotations, toolbox)
  return availableTools(_virus)
}

FA = FileAttachment

// Load the toolbox
_toolbox = await FileAttachment("/toolbox/toolbox.json").json()
toolbox = _toolbox.map( tool => encodeTool(tool) )

// console.log(toolbox)

addEncodedTools = (virus) => {
  return ({ ... virus, tools: toolbox.flatMap( tool => virus[tool.encoded] ? tool.id : []) }) 
}

// Load all Newick tree file and create a dictionary `family -> tree`
nwks = await Promise.all(
  families.map(async (family) => { 
    let tree = await FA("/"+ family + "/tree.newick").text()
    return ({ [family]: tree })
  }))

// console.log(nwks)

// Load annotations for viruses for each family
_annotations = await Promise.all(
  families.map( async (family) => {
    let xls = await FA("/"+ family + "/family.xlsx").xlsx()
    let _annotations = xls.sheet(0, { headers: true, range: ":L" })

    return _annotations.map( virus => ({... virus, family: family }) )
  }))

// Add tools information, just the list of tools ids
annotations = _annotations.flat().map( virus => addEncodedTools(virus) )

// console.log(annotations)

```

