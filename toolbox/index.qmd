
```{ojs}
//| echo: false

html`
  <div class="col-xs-12" style="height:20px;"></div>
  <div class="container grid">
    <div class="g-col-8 jumbotron">
      <h1 class="display-4">Viral Toolbox</h1>
      <p class="lead">This page provides an overview of the different tools or assays in the viral toolbox.</p>
      <p>Please scroll down or click on the tool of interest on the right</p>
    </div>
    <div class="g-col-4">
      <div class="container grid small" align="center" style="--bs-gap: 1.0rem;font-weight:500;">
        ${toolbox.map(tool => 
          html`
            <a href="#${tool.id}-section" class="g-col-6 border card bg-tool card-body tool">
              ${tool.name}
            </a>
            
          `
        )}
      </div>
    </div>
  </div>
  <div class="col-xs-12" style="height:20px;"></div>
`
```

- - -

```{ojs}
//| echo: false

// Create a denormalized list of tools -> family -> virus
denormalized_list = 
  toolbox 
    .flatMap(tool => {
      return annotations.flatMap(family => {
        return family.info.map( virus => {
          console.log(virus)
          const this_toolbox = (virus.toolbox != undefined) ? virus.toolbox: []
          if (this_toolbox.filter(t => t.tool == tool.id).length > 0) {
            return ({
              family: family.family,
              virus: virus.name,
              virus_id: virus.id,
              tool: tool.name,
              tool_id: tool.id
            })
          }
        })
      })
    })
  .filter(el => el != undefined)

html`
  ${toolbox.map(tool => 
    html`
      <h2 id="${tool.id}-section">${tool.name}</h2>
      <div class="container grid" style="width:100%;">
        <div class="g-col-8">
          <p>${tool.description}</p>
        </div>
        <div align="center" class="g-col-4 border card bg-tool card-body tool opacity-100" id="${tool.id}">
          ${tool.name}
        </div>
      </div>
      <div class="col-xs-12" style="height:20px;"></div>
      <table class="table table-striped">
        <thead class="thead-light">
          <tr>
            <th>Virus Family</th>
            <th>Virus</th>
          </tr>
        </thead>
        <tbody>
          ${denormalized_list.filter( virus => (virus.tool_id == tool.id)).map(row =>
            html`
              <tr>
                <td><a href="/${row.family}/index.html">${row.family}
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><g fill="currentColor"><path d="M15.64 7.025h-3.622v-2h7v7h-2v-3.55l-4.914 4.914l-1.414-1.414l4.95-4.95Z"/><path d="M10.982 6.975h-6v12h12v-6h-2v4h-8v-8h4v-2Z"/></g></svg>
                </a></td>
                <td><a href="/${row.family}/${row.virus_id}.html">${row.virus}
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><g fill="currentColor"><path d="M15.64 7.025h-3.622v-2h7v7h-2v-3.55l-4.914 4.914l-1.414-1.414l4.95-4.95Z"/><path d="M10.982 6.975h-6v12h12v-6h-2v4h-8v-8h4v-2Z"/></g></svg>
                </a></td>
              </tr>
            `)}
        </tbody>
      </table>
    `
  )}
`

```


```{ojs}
//| echo: false

viewof checkbox = Inputs.checkbox(
  d3.group(denormalized_list, (d) => d.family),
  { key: ["alpha"]}
)

filtered = checkbox.flat()

// viewof selection = Inputs.table(filtered, {
//   columns: [
//     "key",
//     "value"
//   ],
//   header: {
//     id: "ID",
//     description: "Description"
//   }
// })
```

## Auto-generated using ojs

```{ojs}
//| output: none
//| echo: false

<!-- toolsByFamily = d3.group(filtered, d => d.tool, d => d.family) -->

<!-- console.log(toolsByFamily) -->

html`<table class="table table-striped">
  <thead class="thead-dark">
    <tr>
      <th>Tool</th>
      <th>Virus Family</th>
      <th>Virus</th>
    </tr>
  </thead>
  <tbody>${Array.from(filtered, row => html`
    <tr>
      <td>${row.tool}</td>
      <td>${row.family}</td>
      <td>${row.virus}</td>
    </tr>`)}</tbody>
</table>`
```

## Using Tabulator

<style>@import url("https://unpkg.com/tabulator-tables@5/dist/css/tabulator_bootstrap4.min.css")</style>

```{ojs}
//| output: none
//| echo: false

Tabulator = require("tabulator-tables@5")

viewof t = {
  const data = denormalized_list;
  const table = new Tabulator(document.createElement("DIV"), {
    data,
    height: 400,
    layout: "fitColumns",
    autoColumns: true,
    autoColumnsDefinitions: (columns) =>
      columns.map((d) => ({ ...d, editor: true })),
    editor: true,
    pagination: "local"
  });

  table.element.value = data;

  table.on("dataChanged", (data) => {
    table.element.value = data;
    table.element.dispatchEvent(new CustomEvent("input"));
  });

  return table.element;
}


```

## Auto-generated content

This section is auto-generated based on the available information in data files.
                                                    
```{ojs}
//| output: none
//| echo: false
 
{
  const div = html`<div class="my_special_class"></div>`
  const d = d3.select(div).attr("id", "toolbox")
  toolbox 
    .map(tool => {
      d.append("h2").text(tool.name)
      d.append("p").text(tool.description)
      annotations.map(family => {

        d.append("h3").text(family.family)
        d.append("p").text("This tool is available for the following viruses:")
        const family_ul = d.append("ul")
        

        family.info.map( virus => {
          const this_toolbox = (virus.toolbox != undefined) ? virus.toolbox: []
          if (this_toolbox.filter(t => t.tool == tool.id).length > 0) {
            family_ul.append("li").text(virus.name + " (" + virus.id + ")")
          }
        })
      })
    })    

  return div
}
```

{{< include /_js/_ojs_data.qmd >}}
                     
{{< include /alpha/_ojs_d3.qmd >}}

