---
format:
  html:
    page-layout: full
    anchor-sections: false
    section-divs: false
    include-before-body:
      text: <style>@import url("https://unpkg.com/tabulator-tables@5/dist/css/tabulator_bootstrap4.min.css")</style>
---

```{ojs}
//| echo: false

// Delay scroll to anchor a little bit...
tmp = window.addEventListener("load", () => {
  setTimeout( () => {
     document.getElementById(window.location.hash.substring(1)).scrollIntoView();
  }, 1000)
})

html`
  <div class="col-xs-12" style="height:20px;"></div>
  <div class="container grid" style="--bs-gap: 0;">
    <div class="g-col-md-8 jumbotron">
      <h1 class="display-4">Viral Toolbox</h1>
      <p class="lead">This page provides an overview of the different tools or assays in the viral toolbox.</p>
      <p>Please scroll down or click on the tool of interest on the right</p>
    </div>
    <div class="g-col-md-4">
      <div class="g-col-12 container">
        <div class="toolbox">
            <div id="toolbox-contents" class="tool-container">
              ${toolbox.map(tool => 
                html`
                  <a href="#${tool.id}_section">
                    <div class="tool-wrapper">
                      <div class="tool-tooltip-text">${tool.name}</div>
                      <div id="${tool.id}" class="tool">
                        ${tool.icon.map( i =>
                          html`<img class="tool-icon" height="${(tool.icon.length > 1) ? 150/tool.icon.length : 100}%" src="${i}"/>`
                        )}
                      </div>
                    </div>
                  </a>
                `
              )}
            </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-xs-12" style="height:40px;"></div>
`
```

- - -

```{ojs}
//| echo: false

// Create a denormalized list of tools -> family -> virus
denormalized_list = 
  toolbox 
    .flatMap(tool => {
      return annotations.flatMap(family => {
        return family.info.map( virus => {
          const this_toolbox = (virus.toolbox != undefined) ? virus.toolbox: []
          if (this_toolbox.filter(t => t == tool.id).length > 0) {
            return ({
              family: family.family,
              virus: virus.name,
              virus_id: virus.id,
              tool: tool.name,
              tool_id: tool.id
            })
          }
        })
      })
    })
  .filter(el => el != undefined)

// Use Tabulator for the tables
Tabulator = require("tabulator-tables@5")

function tool_table(tool_id) {

  const data = denormalized_list.filter( virus => (virus.tool_id == tool_id));
  const table = new Tabulator(document.createElement("div"), {
    data,
    height: 400,
    columns: [
      {
        title: "Virus Family",
        field: "family",
        sorter: "string",
        formatter:"link",
        formatterParams: {
          url: cell => { 
            const family = cell.getRow()._row.data.family
            const virus = cell.getRow()._row.data.virus
            return "/" + family + "/" + "index.html"
          }
        }
      },
      {
        title: "Virus",
        field: "virus",
        sorter: "string",
        formatter:"link",
        formatterParams: {
          url: cell => { 
            const family = cell.getRow()._row.data.family
            const virus = cell.getRow()._row.data.virus_id
            return "/" + family + "/" + virus + ".html"
          }
        }
      }
    ],
    layout: "fitColumns",
    editor: false,
    pagination: "local"
  });

  table.element.value = data;

  table.on("dataChanged", (data) => {
    table.element.value = data;
    table.element.dispatchEvent(new CustomEvent("input"));
  });

  return table.element;
}
```

{{< include toolbox_content.qmd >}}

{{< include /_js/_ojs_data.qmd >}}
                     

```{ojs}
//| echo: false

// Render the icons based on the argument
render_icons = (icon_info) => {
  return icon_info.icons.map(i => html`<img class="tool-icon" height="${(icon_info.length > 1) ? 150/icon_info.length : 100}%" src="${i}"/>`)
}

```
