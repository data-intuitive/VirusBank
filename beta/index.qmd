---
title: Para viruses
title-block-banner: virus-banner.jpg
format:
  html:
    page-layout: full
    anchor-sections: true
    section-divs: true
    include-before-body:
      text: <link rel=stylesheet href='https://unpkg.com/phylotree@1.1.0/dist/phylotree.css'/> 
---
      
```{ojs}
//| output: none
//| echo: false

import { nwk } from "./ojs_data.qmd"
import { annotations } from "./ojs_data.qmd"
import { toolbox } from "./ojs_data.qmd"
import { virus_toolbox } from "./ojs_data.qmd"
```
 
```{ojs}
//| output: none
//| echo: false

// Initialize a container to contain the containers for the tree and annotation window
html`

<div class="container">
  <div class="grid" style="--bs-gap: 0;">
    <div id="info-container" class="g-col-md-8 g-col-sm-12 text-center mb-2" style="visibility:hidden;">
      <div class="grid">
        <div id="name" class="g-col-md-12 bold">
          name
        </div>
        <div id="toolbox" class="g-col-md-12">
          no tools yet for this virus
        </div>
      </div>
    </div>
    <div id="tree-container" class="tree-container g-col-md-8 g-col-sm-12 text-center rounded"></div>
    <div id="annotation-container" class="g-col-md-4 g-col-sm-12 no-gutter">
      <div class="container grid small" align="center" style="--bs-gap: 1.0rem;font-weight:500;">
        <div class="g-col-md-12 g-col-sm-12 card card-body tool-header opacity-100" id="virus">
          Viral Toolbox
        </div>
      </div>
      <div class="g-col-12 container">
        <div class="toolbox">
            <div id="toolbox-contents" class="tool-container">
            </div>
        </div>
      </div>
    </div>
    <div id="legend-container" class="g-col-md-9 g-col-sm-12 text-center mb-2">
      <div class="grid p-2">
        <div class="g-col-md-12 small">
          <span class="phylotree-node-text" style="font-size:15px !important;">HOVER</span> for more information /
          <span class="phylotree-node-text-hl" style="font-size:15px !important;">BOLD NODES</span> can be selected /
          <span class="phylotree-node-text-inactive" style="font-size:15px !important;">INACTIVE NODES</span> are for reference
        </div>
      </div>
    </div>
  </div>
</div>
`
```
 
```{ojs}
//| output: none
//| echo: false

height = 550
width = 550

phylotree = await require("phylotree@1.1/dist/phylotree.js");

```

```{ojs}
//| output: none
//| echo: false
 

// If a virus (virus_id or abbreviation in Excel file) is present in the annotations file,
// return the object. This returns 'undefined' when not present.
virusInfoOrUndefined = (virus_id) => annotations.filter(v => v.virus_id == virus_id || v.abbreviation == virus_id)[0]

// Simple true/false 
availableVirusInfo = (virus_id) => virusInfoOrUndefined(virus_id) ? true : false
 
console.log(toolbox)
console.log(annotations)
 
availableTools = (virus_id) =>
    (availableVirusInfo(virus_id))
    ? toolbox.flatMap(tool => virusInfoOrUndefined(virus_id)[tool.encoded] ? tool.encoded : [] )
    : []
 
// console.log("exists? " + virusInfoOrUndefined("AchPV1")[basic_encode("cell-based_assays")])
// 
// console.log(virusInfoOrUndefined("AchPV1"))
// console.log(virusInfoOrUndefined("tst"))
// console.log(availableVirusInfo("AchPV1"))
// console.log(availableVirusInfo("tst"))
//    console.log("AchPV1: " + availableTools("AchPV1"))
//    console.log("tst:    " + availableTools("tst").length)

console.log("CedV: " + availableTools("CedV"))
   
// If no tools are available yet, but the virus is important:
virusOfInterest = (virus_id) =>
    (availableVirusInfo(virus_id))
    ? virusInfoOrUndefined(virus_id).virus_of_interest == "Yes"
    : false

// Initialize the toolbox when the data is loaded
init_toolbox =
  toolbox.map(tool =>
    d3.select("#toolbox-contents").node().append(
      html`
        <a href="/toolbox/index.html#${tool.id}-section">
          <div class="tool-wrapper">
            <div class="tool-tooltip-text">${tool.name}</div>
            <div id="${tool.id}" class="tool">
              ${tool.icon.map( i =>
              html`<img class="tool-icon" height="${(tool.icon.length > 1) ? 150/tool.icon.length : 100}%" src="${i}"/>`
              )}
            </div>
          </div>
        </a>
      `
    )
  )

// Reset the tools in the Toolbox
clearToolbox = () => {

  d3.select("#virus").text("Viral Toolbox")

  toolbox.map(tool => {
    d3.select("#" + tool.id).attr("class", "tool")
  })
}

// Update the tools in the toolbox based on the current virus
updateToolbox = (d) => {
 
  const tools = availableTools(d.data.name)

  d3.select("#virus").text(virusInfoOrUndefined(d.data.name).virus_name)

  toolbox
    .filter(tool => tools.includes(tool.encoded))
    .map(tool =>
      d3.select("#" + tool.id).attr("class", "tool tool-selected")
    )
}

tabsetAnchor = 'tabset-7-1-tab'
virusToTab = ({
    CedV: "tabset-7-1-tab",
    RRV: "tabset-7-2-tab",
    MAYV: "tabset-7-3-tab",
    VEEV: "tabset-7-4-tab",
    SINV: "tabset-7-5-tab",
    SFV: "tabset-7-6-tab"
})

// Hide virus information tabset
// Wrap in closure to keep ojs happy
hide_tabset = {
  const virusInfo = document.getElementById(tabsetAnchor).parentNode.parentNode.parentNode
  virusInfo.style.display = "none"
}

tree = new phylotree.phylotree(nwk)   // class Phylotree
                                      // https://github.com/veg/phylotree.js/blob/master/src/main.js#L90
 
renderedTree = tree
  // Transform the tree (translate and prune)
  // based on the input Excel file for this virus family
  .traverse_and_compute(node => {
    const virus = node.data.name
    const isLeaf = tree.isLeafNode(node)
    if (isLeaf) {
      const information = virusInfoOrUndefined(virus)
      if (virusOfInterest(node.data.name)) {
        const currentName = virus
        const newName = information.abbreviation
        node.data.name = newName
      } else {
        node.data.name = "remove_me"
        tree.deleteANode(node)
      }
    } 
  })
  .render({
    'left-right-spacing': 'fit-to-size',
    'top-bottom-spacing': 'fit-to-size',
    'is-radial':          true,
    'selectable':         false,
    'collapsible':        false,
    'transitions' :       true,
    'show-menu':          false,
    'show-scale':         false,
    'align-tips':         true,
    'width':              width,
    'height':             height,
    'zoom':               false,
    'brush':              false,
    'draw-size-bubbles':  false,
    'minimal-per-node-spacing':  2,
    'minimum-per-level-spacing': 2,
  })
  .style_nodes( (element, data) => {

    const virus_id = data.data.name

    // At this stage in the process, every node should have information
    const information = virusInfoOrUndefined(virus_id)
    const tools = availableTools(virus_id)
    const inToolbox = tools.length > 0

    // Styling based on available information
    const updtElement1 =
      information 
        ? element.select("text").attr("class", "phylotree-node-text")
        : element.select("text").attr("class", "phylotree-node-text-inactive")
    const updtElement = inToolbox ? element.select("text").attr("class", "phylotree-node-text-hl") : element

    // Hover functionality - Virus name
    if (information)
      element
        .on("mouseover", virusHoverIn(data, information, availableTools(virus_id).length > 0))
        .on("mouseout", virusHoverOut)
 
    // Click functionality - Toolbox
    inToolbox
      ? element.on('click', function() {
          console.log("onclick")
          console.log(data)
          clearToolbox();
          // Select the first tab in order to get to the root of the tabset
          const virusInfo = document.getElementById(tabsetAnchor).parentNode.parentNode.parentNode
          virusInfo.style.display = "block"
          // Now get the proper tab and open it
          const thisVirusInfo = document.getElementById(virusToTab[virus_id])
          //thisVirusInfo.click();
          // Render the toolbox for this virus
          updateToolbox(data);
        })
      : element.on('click', function() {
          clearToolbox();
        })

  })
  .layout(true)

// Show small virus information box on hover
virusHoverIn = (data, information, is_available) => () => {
  // First, populate the content
  d3.select("#name").text(information.virus_name)
  if (is_available)
    d3.select("#toolbox").text("Viral tools are available, please select the virus for more information")
  else
     d3.select("#toolbox").text("No viral tools have been developed yet")
  // ... then show the content
  d3.select("#info-container").attr("style", "visibility:visible;")
}

virusHoverOut = () => {
  d3.select("#info-container").attr("style", "visibility:hidden;")
}

// Add SVG to the DOM
tmp = d3.select("#tree-container").node().appendChild(renderedTree.svg.node())

```

&nbsp;

:::: {.panel-tabset}

## Chikungunya virus

{{< include _CHIKV.qmd >}}

:::{ style="text-align:center;font-weight:500" }
[open virus page](/alpha/CHIKV.qmd) / [reload family page](/alpha/)
:::

## River Ross virus

{{< include _RRV.qmd >}}

:::{ style="text-align:center;font-weight:500" }
[open virus page](/alpha/RRV.qmd) / [reload family page](/alpha/)
:::

## Mayaro virus

{{< include _MAYV.qmd >}}

:::{ style="text-align:center;font-weight:500" }
[open virus page](/alpha/MAYV.qmd) / [reload family page](/alpha/)
:::

## Venezuelan Equine Encephalitis virus

{{< include _VEEV.qmd >}}

:::{ style="text-align:center;font-weight:500" }
[open virus page](/alpha/VEEV.qmd) / [reload family page](/alpha/)
:::

## Sindbis virus

{{< include _SINV.qmd >}}

:::{ style="text-align:center;font-weight:500" }
[open virus page](/alpha/SINV.qmd) / [reload family page](/alpha/)
:::

## Semliki Forest virus

{{< include _SFV.qmd >}}

:::{ style="text-align:center;font-weight:500" }
[open page](/alpha/SFV.qmd) / [reload family page](/alpha/)
:::

::::
