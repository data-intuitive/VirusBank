---
title: Alphaviruses
title-block-banner: virus-banner.png
format:
  html:
    page-layout: full
    anchor-sections: true
    section-divs: true
---

<!-- {{< include ../_includes/phylotree.qmd >}} -->

- - -

&nbsp;

```{ojs}
//| output: none
//| echo: false

// Initialize a container to contain the containers for the tree and annotation window
html`
<div class="container">
  <div class="grid" style="--bs-gap: 0;">
    <!-- <div id="pointer-container" class="tree-container g-col-1 text-center rounded"> -->
    <!--   <div class="grid"> -->
    <!--     <div class="g-col-12"> -->
    <!--       <i class="bi bi-skip-backward"></i> -->
    <!--       <i class="fa fa-github"></i> -->
    <!--     </div> -->
    <!--   </div> -->
    <!-- </div> -->
    <div id="tree-container" class="tree-container g-col-md-9 g-col-sm-12 text-center rounded"></div>
    <div id="annotation-container" class="g-col-md-3 g-col-sm-12 no-gutter">
      <div class="container grid small" align="center" style="--bs-gap: 1.0rem;">
          <div class="g-col-md-12 g-col-sm-12 border card bg-light card-body tool-header opacity-100" id="virus">Please click on a virus</div>
          <div class="g-col-6 border card card-body tool opacity-25 text-wrap"  id="cpe">CPE reduction assay</div>
          <div class="g-col-6 border card card-body tool opacity-25"  id="yield">Virus yield assay</div>
          <div class="g-col-6 border card card-body tool opacity-25"  id="delay">Delay of treatment assay</div>
          <div class="g-col-6 border card card-body tool opacity-25"  id="plaque">Plaque assay</div>
          <div class="g-col-6 border card card-body tool opacity-25"  id="pcr">qRT-PCR</div>
          <div class="g-col-6 border card card-body tool opacity-25"  id="reverse">Reverse genetics system</div>
          <div class="g-col-6 border card card-body tool opacity-25"  id="model">
              <img class="card-img" src="/img/model-copy.png" style="height:100%;"/>
              <div class="card-img-overlay">
                Animal models
              </div>
          </div>
          <div class="g-col-6 border card card-body tool opacity-25"  id="reporter">
              <img class="card-img" src="/img/reporter.png" style="height:100%;"/>
              <div class="card-img-overlay">
                Reporter virus
              </div>
          </div>
          <!-- <a>clear</a> -->
      </div>
    </div>
  </div>
</div>

<style>
.tool {
  display:inline-block;
  height:90px;
}

.card-body:hover  {
  opacity:80% !important;
}

.card-body:hover .card-img {
  opacity:0%;
}
</style>
`

// cpeIn = d3.select("#cpe").on("mouseover",
//     () => { d3.select("#cpe").attr("class", "g-col-6 border-white card card-body tool opacity-50") }
//   )
// cpeOut = d3.select("#cpe").on("mouseout",
//     () => d3.select("#cpe").attr("class", "g-col-6 border card card-body tool opacity-25")
//   )

```

&nbsp;

- - -

::: {.panel-tabset .bg-black}

## Chikungunya virus

{{< include _CHIKV.qmd >}}

[open page](/alpha/CHIKV.qmd)

## River Ross virus

{{< include _RRV.qmd >}}

[open page](/alpha/RRV.qmd)

:::

&nbsp;

```{ojs}
//| output: none
//| echo: false
html`<link rel=stylesheet href='${resolve("phylotree@1.1.0/dist/phylotree.css")}'>`

height = 550
width = 550

d3 = {
  const d3 = window.d3 = await require("d3@7");
  await require("d3-context-menu@2.1.0/js/d3-context-menu.js").catch(() => {});
  return d3;
}

phylotree = await require("phylotree@1.1/dist/phylotree.js");

FA = FileAttachment
nwk = await FA("/alpha/tree.newick").text();
annotations = await FA("/alpha/annotations.json").json();
annotationsMap = Object.assign({}, ...(annotations.map(item => ({ [item.id]: { id: item.id, name: item.name, toolbox: item.toolbox } }) )))

filteredAnnotationsMap = Object.fromEntries(Object.entries(annotationsMap).filter(([k,v]) => v.name != undefined));
filteredAnnotations = annotations.filter(v => v.name != undefined)

toolbox = await FA("/alpha/toolbox.json").json();

availableVirusInfo = (virus_id) => annotationsMap[virus_id] != undefined

<!-- clearPopup = () => { -->
<!--   const ct = d3.select('#annotation-container') -->
<!--   ct.selectAll("*").remove() -->
<!-- } -->

clearPopup = () => {
    d3.select("#cpe").attr("class", "g-col-6 border card card-body tool opacity-25")
    d3.select("#model").attr("class", "g-col-6 border card card-body tool opacity-25")
    d3.select("#yield").attr("class", "g-col-6 border card card-body tool opacity-25")
    d3.select("#reverse").attr("class", "g-col-6 border card card-body tool opacity-25")
    d3.select("#pcr").attr("class", "g-col-6 border card card-body tool opacity-25")
    d3.select("#plaque").attr("class", "g-col-6 border card card-body tool opacity-25")
    d3.select("#delay").attr("class", "g-col-6 border card card-body tool opacity-25")
    d3.select("#reporter").attr("class", "g-col-6 border card card-body tool opacity-25")

  const virusInfo = document.getElementById("tabset-3-1-tab").parentNode.parentNode.parentNode
  virusInfo.style.display = "none"

}

initPopup = () => {
  const ct = d3.select('#annotation-container')
  ct.selectAll("*").remove()
  const ctBody = ct.append("div").attr("class", "card-body")
  ctBody.append('h5').attr('class', "card-title").text("Please click on a virus to get more information");
}

toolToVirus = (tool_id) => 
  toolbox.filter(t => t.id == tool_id).map(t => t.available)[0]

availableTools = (virus_id) =>
    (annotationsMap[virus_id] != undefined)
    ? ( annotationsMap[virus_id].toolbox != undefined )
        ? annotationsMap[virus_id].toolbox
        : []
    : []

function renderToolbox(parent, toolbox) {

    toolbox.map(el => {
        if (el.tool == "model") {
            parent.append("img").attr("src", "/img/model-copy.png").attr("width", "70px")
            parent.append("span").text("Animal models")
            const l = parent.append("ul")
            el.details.map(m => l.append("li").text(m))
        }
    });

}

updateToolbox = (d) => {
  
  d3.select("#virus").html("<b><a class='link-secondary' style='font-size:1.5rem' href='/alpha/" + d.data.name + ".html'>" + d.data.name + "</a></b>")
  console.log(annotationsMap)
  const toolbox = availableTools(d.data.name)
  toolbox.map(el => {
    if (el.tool == "cpe") d3.select("#cpe").attr("class", "g-col-6 border card card-body tool opacity-100")
    if (el.tool == "model") d3.select("#model").attr("class", "g-col-6 border card card-body tool opacity-100")
    if (el.tool == "yield") d3.select("#yield").attr("class", "g-col-6 border card card-body tool opacity-100")
    if (el.tool == "reverse") d3.select("#reverse").attr("class", "g-col-6 border card card-body tool opacity-100")
    if (el.tool == "pcr") d3.select("#pcr").attr("class", "g-col-6 border card card-body tool opacity-100")
    if (el.tool == "plaque") d3.select("#plaque").attr("class", "g-col-6 border card card-body tool opacity-100")
    if (el.tool == "delay") d3.select("#delay").attr("class", "g-col-6 border card card-body tool opacity-100")
    if (el.tool == "reporter") d3.select("#reporter").attr("class", "g-col-6 border card card-body tool opacity-100")
  })
}

fillPopup = (d) => {
  const ct = d3.select('#annotation-container');
  const ctBody = ct.append("div").attr("class", "card-body");
  ctBody.append("a").attr("href", "/alpha/" + annotationsMap[d.data.name].id + ".html").append('h3').attr('class', "card-title").text(annotationsMap[d.data.name].name);
  const card = ctBody.append('div').attr("class", "card-text");

    card.append("h4").text("Toolbox contents:")
    const this_div = card.append("div");

    renderToolbox(this_div, annotationsMap[d.data.name].toolbox)

}

init = clearPopup()
// s1 = d3.select("body").on('click', clearPopup )

virusToTab = ({
    CHIKV: "tabset-3-1-tab",
    RRV: "tabset-3-2-tab"
})

tree = new phylotree.phylotree(nwk)   // class Phylotree
                                      // https://github.com/veg/phylotree.js/blob/master/src/main.js#L90

renderedTree = tree                   // class TreeRender
  .render({
    'left-right-spacing': 'fit-to-size',
    'top-bottom-spacing': 'fit-to-size',
    'is-radial': true,
    'selectable': false,  // make nodes and branches not selectable
    'collapsible': true,
    'transitions' : true,
    'show-menu': false,
    'show-scale': false,
    'align-tips': true,
    'width': width,
    'height': height,
    'zoom': false,
    'minimal-per-node-spacing': 2,
    'minimum-per-level-spacing': 2,
    'container': "#tree-container"
  })
  .style_nodes( (element, data) => {
    const inToolbox = (availableTools(data.data.name).length > 0)
    const availableInfo = availableVirusInfo(data.data.name) 
    const updtElement1 =
      availableInfo
        ? element.select("text").attr("class", "phylotree-node-text")
        : element.select("text").attr("class", "phylotree-node-text-inactive")
    const updtElement = inToolbox ? element.select("text").attr("class", "phylotree-node-text-hl") : element
    availableInfo
      ? element.on('click', function() {
          // clearPopup();
          // Select the first tab in order to get to the root of the tabset
          const virusInfo = document.getElementById("tabset-3-1-tab").parentNode.parentNode.parentNode
          virusInfo.style.display = "block"
          // Now get the proper tab
          const thisVirusInfo = document.getElementById(virusToTab[data.data.name])
          thisVirusInfo.click();
          updateToolbox(data);
        })
      : element.on('click', function() {
          clearPopup();
        })
  })
  .layout(true)

tmp = d3.select("#tree-container").node().appendChild(renderedTree.svg.node())

```
